#!/usr/bin/env node

/**
 * Module dependencies.
 */

const express   = require('express');
const debug     = require('debug')('server:server');
const http      = require('http');

let app         = express();

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
//  Create HTTP server.
//  NOTE to self:
//    https://stackoverflow.com/questions/26921117/http-createserverapp-v-http-serverapp
//    http.createServer() only does one thing: 
//    it calls http.Server() internally and returns the resulting instance.
//    therefore http.Server() saves one function call
//    let server = http.createServer(app); replaced by server = http.Server(app)
*/

let server = http.Server(app);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
